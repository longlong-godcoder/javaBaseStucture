package dataStructure.graph;

/**
 * 图的分类与常用术语：
 * （顶点vertex， 边edge， G = (V, E)）
 * 1.根据边的方向：无向图，无向图，混合图（有向加无向），出度（从vertex出的有向edge），入度
 * 2.根据是否有环：有环图，无环图
 * 3.根据是否有平行边：简单图，多重图（有向图强调方向一致才算平行）
 * 4.根据边的饱和度：有向或无向完全图（所有vertex之间都存在边），稠密图（接近完全图），稀疏图（远远少于完全图）
 * 5.根据边是否有权重值：有权图
 * 6.根据edge的抵达性：连通图（存在x,y顶点可以直接或间接相互抵达），连通分量（无向连通图的极大连通子图），
 * 强连通图（任意x,y顶点连通），强连通分量（连通图的连通分量为强连通图的连通分量）
 * ==========================================================================================
 * 一般采用两种方式实现图：
 * 1.邻接矩阵（Adjacency Matrix）
 * 即一维数组存放vertex，二维数组方阵存放edge表（采用0，1标识方向）；
 * 显然意见，邻接矩阵这种方式适合有向图，稠密图，这样可以更好的利用二维数组空间不造成浪费
 * 2.邻接表（Adjacency List）
 * 即一个元素为链表的数组，通过链表表示边的关系，如果有权值，可以在节点中储存
 * 显而易见这样比较节省空间
 */

/**
 * 图的抽象类
 */
public abstract class Graph<V, E> {



    public interface WeightManager<E>{
        int compare(E w1, E w2);
        E add(E w1, E w2);
        E zero();
    }

}
